import React, { useState } from "react";
import SidebarPerfil from "./SidebarPerfil";
import DadosPessoais from "./DadosPessoais";
import RelatoriosPerfil from "./RelatoriosPerfil";
import ComprovantesPerfil from "./ComprovantesPerfil";
import OutrosRecursos from "./OutrosRecursos";
import "./Perfil.css";

const Perfil = () => {
  const [secaoAtiva, setSecaoAtiva] = useState("dados");

  const renderConteudo = () => {
    switch (secaoAtiva) {
      case "dados":
        return <DadosPessoais />;
      case "relatorios":
        return <RelatoriosPerfil />;
      case "comprovantes":
        return <ComprovantesPerfil />;
      case "outros":
        return <OutrosRecursos />;
      default:
        return <DadosPessoais />;
    }
  };

  return (
    <div className="perfil-bg">
      <div className="perfil-container d-flex">
        <SidebarPerfil setSecaoAtiva={setSecaoAtiva} secaoAtiva={secaoAtiva} />
        <div className="perfil-conteudo">
          {renderConteudo()}
        </div>
      </div>
    </div>
  );
};

export default Perfil;

import React, { useState } from 'react';
import { Card, Image, Button, Modal, Form } from 'react-bootstrap';
import './DadosPessoais.css';

const DadosPessoais = () => {
  const [imagem, setImagem] = useState(null);
  const [showModal, setShowModal] = useState(false);
  const [campoParaAtualizar, setCampoParaAtualizar] = useState("");
  const [formDados, setFormDados] = useState({
    senhaAtual: "",
    novaSenha: "",
    confirmarSenha: "",
    novoEmail: "",
    novoTelefone: ""
  });
  
  const dadosUsuario = {
    nome: 'Maria Silva',
    data_nascimento: '2007-05-15',
    responsavel: 'João Silva',
    telefone: '(11) 98765-4321',
    email: 'maria.silva@email.com',
    fotoPerfil: 'https://via.placeholder.com/150'
  };

  const handleImagemChange = (e) => {
    const file = e.target.files[0];
    if (file) {
      setImagem(URL.createObjectURL(file));
    }
  };

  const handleInputChange = (e) => {
    setFormDados({
      ...formDados,
      [e.target.name]: e.target.value
    });
  };

  const handleAbrirModal = () => {
    setShowModal(true);
    setCampoParaAtualizar("");
    setFormDados({
      senhaAtual: "",
      novaSenha: "",
      confirmarSenha: "",
      novoEmail: "",
      novoTelefone: ""
    });
  };

  const handleFecharModal = () => {
    setShowModal(false);
  };

  const handleSubmitAtualizacao = () => {
    
    console.log("Campo para atualizar:", campoParaAtualizar);
    console.log("Dados do formulário:", formDados);
    
    setShowModal(false);
  };

  const renderFormularioAtualizacao = () => {
    switch (campoParaAtualizar) {
      case "senha":
        return (
          <>
            <Form.Group className="mb-3">
              <Form.Label className="label-azul">Senha atual</Form.Label>
              <Form.Control 
                type="password" 
                name="senhaAtual"
                value={formDados.senhaAtual}
                onChange={handleInputChange}
              />
            </Form.Group>
            
            <Form.Group className="mb-3">
              <Form.Label className="label-azul">Nova senha</Form.Label>
              <Form.Control 
                type="password" 
                name="novaSenha"
                value={formDados.novaSenha}
                onChange={handleInputChange}
              />
            </Form.Group>
            
            <Form.Group className="mb-3">
              <Form.Label className="label-azul">Confirmar nova senha</Form.Label>
              <Form.Control 
                type="password" 
                name="confirmarSenha"
                value={formDados.confirmarSenha}
                onChange={handleInputChange}
              />
            </Form.Group>
          </>
        );
      case "email":
        return (
          <Form.Group className="mb-3">
            <Form.Label className="label-azul">Novo email</Form.Label>
            <Form.Control 
              type="email" 
              name="novoEmail"
              value={formDados.novoEmail}
              onChange={handleInputChange}
            />
          </Form.Group>
        );
      case "telefone":
        return (
          <Form.Group className="mb-3">
            <Form.Label className="label-azul">Novo telefone</Form.Label>
            <Form.Control 
              type="text" 
              name="novoTelefone"
              value={formDados.novoTelefone}
              onChange={handleInputChange}
            />
          </Form.Group>
        );
      default:
        return (
          <p className="text-muted text-center">Selecione qual informação deseja atualizar</p>
        );
    }
  };

  return (
    <>
      <Card className="mb-4 shadow-sm p-4">
        <h4 className="label-azul mb-4">Dados Pessoais</h4>
        
        <div className="row mb-4">
          <div className="col-md-4 text-center">
            <div className="d-flex flex-column align-items-center">
              <Image
                src={imagem || dadosUsuario.fotoPerfil}
                roundedCircle
                width={150}
                height={150}
                className="mb-3"
              />
              <input type="file" onChange={handleImagemChange} className="mb-2" />
              <Button className="custom-button-azul">Salvar Foto</Button>
            </div>
          </div>
          
          <div className="col-md-8">
            <div className="mb-3">
              <h6 className="label-azul">Nome completo</h6>
              <p className="form-control border bg-light">{dadosUsuario.nome}</p>
            </div>

            <div className="mb-3">
              <h6 className="label-azul">Data de nascimento</h6>
              <p className="form-control border bg-light">
                {new Date(dadosUsuario.data_nascimento).toLocaleDateString('pt-BR')}
              </p>
            </div>
            
            <div className="mb-3">
              <h6 className="label-azul">Nome do Responsável</h6>
              <p className="form-control border bg-light">{dadosUsuario.responsavel}</p>
            </div>

            <div className="mb-3">
              <h6 className="label-azul">Telefone do Responsável</h6>
              <p className="form-control border bg-light">{dadosUsuario.telefone}</p>
            </div>

            <div className="mb-3">
              <h6 className="label-azul">Email do Responsável</h6>
              <p className="form-control border bg-light">{dadosUsuario.email}</p>
            </div>
            
            <div className="mb-3">
              <h6 className="label-azul">Senha</h6>
              <p className="form-control border bg-light">••••••••</p>
            </div>
          </div>
        </div>
        
        <div className="text-end">
          <Button className="custom-button-azul" onClick={handleAbrirModal}>
            Atualizar Dados
          </Button>
        </div>
      </Card>

      {/* Modal de Atualização */}
      <Modal show={showModal} onHide={handleFecharModal} centered className="modal-atualizar">
        <div className="registro-header-azul">
          <Modal.Title className="text-white">Atualizar Dados</Modal.Title>
        </div>
        <Modal.Body className="py-4">
          <Form>
            <Form.Group className="mb-4">
              <Form.Label className="label-azul fw-bold">O que você deseja atualizar?</Form.Label>
              <div className="mt-2">
                <Form.Check
                  type="radio"
                  label="Email"
                  name="campoAtualizacao"
                  id="radio-email"
                  checked={campoParaAtualizar === "email"}
                  onChange={() => setCampoParaAtualizar("email")}
                  className="mb-2 radio-custom-azul"
                />
                <Form.Check
                  type="radio"
                  label="Senha"
                  name="campoAtualizacao"
                  id="radio-senha"
                  checked={campoParaAtualizar === "senha"}
                  onChange={() => setCampoParaAtualizar("senha")}
                  className="mb-2 radio-custom-azul"
                />
                <Form.Check
                  type="radio"
                  label="Telefone"
                  name="campoAtualizacao"
                  id="radio-telefone"
                  checked={campoParaAtualizar === "telefone"}
                  onChange={() => setCampoParaAtualizar("telefone")}
                  className="radio-custom-azul"
                />
              </div>
            </Form.Group>

            {/* Form dinâmico baseado na seleção */}
            {renderFormularioAtualizacao()}
          </Form>
        </Modal.Body>
        <Modal.Footer className="border-0 justify-content-center gap-3 pb-4">
          <Button variant="outline-secondary" onClick={handleFecharModal} className="custom-button-outline px-4">
            Cancelar
          </Button>
          <Button 
            className="custom-button-azul px-4" 
            onClick={handleSubmitAtualizacao}
            disabled={!campoParaAtualizar}
          >
            Salvar
          </Button>
        </Modal.Footer>
      </Modal>
    </>
  );
};

export default DadosPessoais;

@import url('https://fonts.googleapis.com/css2?family=Fredoka:wght@300;400;500;600;700&display=swap');

/* Estilos gerais */
.custom-button-azul {
  background-color: #0A7D7E;
  border: none;
  transition: all 0.2s;
  padding: 8px 16px;
  font-weight: 500;
}

.custom-button-azul:hover {
  background-color: #076666;
  transform: translateY(-2px);
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
}

.custom-button-azul:disabled {
  background-color: #076666;
  transform: none;
}

.custom-button-outline {
  color: #0A7D7E;
  border-color: #0A7D7E;
  background-color: transparent;
  font-weight: 500;
  transition: all 0.2s;
}

.custom-button-outline:hover {
  background-color: #f0f9f9;
  color: #076666;
  border-color: #076666;
  transform: translateY(-2px);
}

.label-azul {
  color: #0A7D7E;
  font-weight: 500;
}

/* Estilos para o cabeçalho do modal */
.registro-header-azul {
  background-color: #076666;
  color: white;
  text-align: center;
  padding: 15px;
  padding-top: 20px;
  border-radius: 10px 10px 0 0;
}

/* Estilos para o modal */
.modal-atualizar .modal-content {
  border-radius: 10px;
  border: none;
  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
}

.modal-atualizar .form-control:focus {
  border-color: #0A7D7E;
  box-shadow: 0 0 0 0.25rem rgba(10, 125, 126, 0.25);
}

/* Estilo para os radio buttons */
.radio-custom-azul .form-check-input:checked {
  background-color: #0A7D7E;
  border-color: #0A7D7E;
}

.radio-custom-azul .form-check-input:focus {
  border-color: #0A7D7E;
  box-shadow: 0 0 0 0.25rem rgba(10, 125, 126, 0.25);
}

import React, { useState } from 'react';
import { Card, Button, Table, Form } from 'react-bootstrap';

const ComprovantesPerfil = () => {
  const [comprovantes, setComprovantes] = useState([]);
  const [novoComprovante, setNovoComprovante] = useState(null);

  const handleUpload = () => {
    if (novoComprovante) {
      const novoItem = {
        nome: novoComprovante.name,
        data: new Date().toLocaleDateString(),
      };
      setComprovantes([...comprovantes, novoItem]);
      setNovoComprovante(null);
    }
  };

  return (
    <Card className="mb-4 shadow-sm p-3">
      <h4 className="label-azul mb-3">Comprovantes Enviados</h4>

      <div className="d-flex gap-3 mb-4">
        <Form.Control
          type="file"
          onChange={(e) => setNovoComprovante(e.target.files[0])}
        />
        <Button className="custom-button-azul" onClick={handleUpload}>
          Enviar
        </Button>
      </div>

      {comprovantes.length > 0 ? (
        <Table striped bordered hover responsive>
          <thead>
            <tr>
              <th>Nome do Arquivo</th>
              <th>Data de Envio</th>
            </tr>
          </thead>
          <tbody>
            {comprovantes.map((c, index) => (
              <tr key={index}>
                <td>{c.nome}</td>
                <td>{c.data}</td>
              </tr>
            ))}
          </tbody>
        </Table>
      ) : (
        <p className="text-muted">Nenhum comprovante enviado ainda.</p>
      )}
    </Card>
  );
};

export default ComprovantesPerfil;


import React from 'react';
import { Card } from 'react-bootstrap';

const OutrosRecursos = () => {
  return (
    <Card className="mb-4 shadow-sm p-3">
      <h4 className="label-azul mb-3">Outros Recursos</h4>
      <p>
        Aqui você pode adicionar mais funcionalidades como:
      </p>
      <ul>
        <li>Certificados de participação</li>
        <li>Histórico de voluntariado</li>
        <li>Feedbacks recebidos</li>
        <li>Badges ou selos sociais</li>
      </ul>
    </Card>
  );
};

export default OutrosRecursos;


import React from 'react';
import { Card } from 'react-bootstrap';
import {
  BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, PieChart, Pie, Cell, Legend, ResponsiveContainer
} from 'recharts';

const dadosAtividades = [
  { name: 'Janeiro', horas: 20 },
  { name: 'Fevereiro', horas: 15 },
  { name: 'Março', horas: 25 },
  { name: 'Abril', horas: 18 },
];

const dadosCategorias = [
  { name: 'Educação', value: 40 },
  { name: 'Saúde', value: 30 },
  { name: 'Meio Ambiente', value: 30 },
];

const cores = ['#0A7D7E', '#76B5A0', '#B3E0C2'];

const RelatoriosPerfil = () => {
  return (
    <Card className="mb-4 shadow-sm p-3">
      <h4 className="label-azul mb-4">Relatórios de Participação</h4>

      <div className="row">
        <div className="col-md-6">
          <h6 className="label-azul">Horas por Mês</h6>
          <ResponsiveContainer width="100%" height={250}>
            <BarChart data={dadosAtividades}>
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis dataKey="name" />
              <YAxis />
              <Tooltip />
              <Bar dataKey="horas" fill="#0A7D7E" />
            </BarChart>
          </ResponsiveContainer>
        </div>

        <div className="col-md-6">
          <h6 className="label-azul">Categorias de Ação</h6>
          <ResponsiveContainer width="100%" height={250}>
            <PieChart>
              <Pie
                data={dadosCategorias}
                dataKey="value"
                nameKey="name"
                cx="50%"
                cy="50%"
                outerRadius={80}
                fill="#8884d8"
                label
              >
                {dadosCategorias.map((entry, index) => (
                  <Cell key={`cell-${index}`} fill={cores[index % cores.length]} />
                ))}
              </Pie>
              <Tooltip />
              <Legend />
            </PieChart>
          </ResponsiveContainer>
        </div>
      </div>
    </Card>
  );
};

export default RelatoriosPerfil;


import React from 'react';
import { FaUser, FaChartBar, FaFileAlt, FaEllipsisH } from 'react-icons/fa';
import './SidebarPerfil.css';

const SidebarPerfil = ({ setSecaoAtiva, secaoAtiva }) => {
  return (
    <div className="sidebar-perfil d-flex flex-column p-3">
      <a 
        href="#" 
        onClick={(e) => {
          e.preventDefault();
          setSecaoAtiva("dados");
        }}
        className={secaoAtiva === "dados" ? "active" : ""}
      >
        <FaUser /> Dados
      </a>
      <a 
        href="#" 
        onClick={(e) => {
          e.preventDefault();
          setSecaoAtiva("relatorios");
        }}
        className={secaoAtiva === "relatorios" ? "active" : ""}
      >
        <FaChartBar /> Relatórios
      </a>
      <a 
        href="#" 
        onClick={(e) => {
          e.preventDefault();
          setSecaoAtiva("comprovantes");
        }}
        className={secaoAtiva === "comprovantes" ? "active" : ""}
      >
        <FaFileAlt /> Comprovantes
      </a>
      <a 
        href="#" 
        onClick={(e) => {
          e.preventDefault();
          setSecaoAtiva("outros");
        }}
        className={secaoAtiva === "outros" ? "active" : ""}
      >
        <FaEllipsisH /> Outros
      </a>
    </div>
  );
};

export default SidebarPerfil;

.sidebar-perfil {
  width: 220px;
  background-color: #0A7D7E;
  height: 100vh;
  color: white;
  font-family: 'Fredoka', sans-serif;
}

.sidebar-perfil a {
  color: white;
  text-decoration: none;
  margin: 15px 0;
  padding: 10px;
  font-size: 18px;
  display: flex;
  align-items: center;
  gap: 10px;
  transition: all 0.2s ease;
}

.sidebar-perfil a:hover {
  background-color: #076666;
  border-radius: 5px;
}

.sidebar-perfil a.active {
  background-color: #076666;
  border-radius: 5px;
  font-weight: bold;
}